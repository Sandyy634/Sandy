import time
from termcolor import colored  # Import for colored text

# Constants
MAX_DEGREE = 90  # Maximum degree for alignment
FULL_EXTENDED = 1  # Gear fully extended signal (HIGH voltage)
RETRACTED = 0  # Gear retracted signal (LOW voltage)

# Main function
def main():
    # Initialize sensor values
    gear_sensors = [0, 0, 0]  # Landing gear sensors, 0 means retracted
    direction_sensor = 0  # Directional sensor value in degrees
    gear_down_switch = False  # Gear down switch activation
    
    print("Welcome to the Aircraft Landing Gear Monitoring System!")
    
    # Menu
    while True:
        print("\nMenu:")
        print("1. Input Gear Status")
        print("2. Input Directional Sensor")
        print("3. Activate Gear Down Switch")
        print("4. Calculate Lift")
        print("5. Exit")
        choice = input("Select an option: ")

        if choice == '1':
            # Update gear sensor statuses
            for i in range(3):
                gear_sensors[i] = int(input(f"Enter status for Gear {i+1} (1 for extended, 0 for retracted): "))
        elif choice == '2':
            # Update direction sensor
            direction_sensor = float(input(f"Enter the direction sensor value (0 to {MAX_DEGREE} degrees): "))
        elif choice == '3':
            gear_down_switch = True
            print("Gear down switch activated!")
            monitor_landing_gear(gear_sensors, direction_sensor, gear_down_switch)
        elif choice == '4':
            # Calculate lift
            calculate_lift()
        elif choice == '5':
            print("Exiting the system.")
            break
        else:
            print("Invalid option. Please select again.")

# Task 4a: Monitor the landing gear status and activate LEDs
def monitor_landing_gear(gear_sensors, direction_sensor, gear_down_switch):
    if gear_down_switch:
        # Check if all gears are extended
        if all(sensor == FULL_EXTENDED for sensor in gear_sensors) and direction_sensor == 0:
            illuminate_green_led()
        else:
            illuminate_red_led()

# Task 4b: Create a log (black box) for landing conditions
def log_black_box(gear_sensors, direction_sensor, lift, led_status):
    log = {
        "gear_sensors": [bin(sensor) for sensor in gear_sensors],
        "direction_sensor": bin(int(direction_sensor / 10)),  # Convert degrees to binary (0 to 9)
        "lift": bin(lift),
        "led_status": led_status
    }
    print("Black Box Log:", log)

# Task 4c: Convert analogue sensor to binary
def convert_directional_sensor_to_binary(direction_sensor):
    return bin(int(direction_sensor / 10))  # Convert 0 to 90 degrees to a binary range (0 to 9)

# Task 4d: Calculate airplane lift
def calculate_lift():
    velocity = float(input("Enter the velocity of the airplane (m/s): "))
    wing_area = float(input("Enter the wing area of the airplane (m^2): "))
    air_density = float(input("Enter the air density (kg/m^3): "))

    # Lift formula: L = 0.5 * air_density * velocity^2 * wing_area * lift_coefficient
    lift_coefficient = 1.5  # Simplified constant for this problem
    lift = 0.5 * air_density * velocity ** 2 * wing_area * lift_coefficient

    # Discretize and convert to binary
    lift_binary = discretize_lift(lift)
    print(f"Calculated Lift (in binary): {bin(lift_binary)}")
    
    # Log the lift into black box
    log_black_box([0, 0, 0], 0, lift_binary, "N/A")

# Discretize lift to binary
def discretize_lift(lift):
    if lift < 1000:
        return 1
    elif lift < 2000:
        return 2
    elif lift < 3000:
        return 3
    elif lift < 4000:
        return 4
    else:
        return 5

# Task 4a: Illuminate green LED for proper gear extension
def illuminate_green_led():
    print(colored("Green LED illuminated: All gears are properly extended.", 'green'))  # Green color text
    log_black_box([FULL_EXTENDED, FULL_EXTENDED, FULL_EXTENDED], 0, 0, "Green")
    time.sleep(10)  # LED stays on for 10 seconds
    print(colored("Green LED off.", 'green'))

# Task 4a: Illuminate red LED for improper gear extension or alignment
def illuminate_red_led():
    print(colored("Red LED illuminated: Gear malfunction or misalignment detected.", 'red'))  # Red color text
    log_black_box([RETRACTED, RETRACTED, RETRACTED], 90, 0, "Red")
    time.sleep(10)  # LED stays on for 10 seconds
    print(colored("Red LED off.", 'red'))

if __name__ == "__main__":
    main()
